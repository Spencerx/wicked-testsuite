Testing topology
================

The ideal topology for testing Wicked is as below:

            +-------------+
            |             |
            | Test suite  |
            |  (with      |
            |   Jenkins   |
            |   as an     |
            |   option)   |
            |             |
            +-+---------+-+
              |         |
              | serial, |
              | ssh,    +---------------+ serial, ssh,
 *********    | or virtio               | or virtio
 * Outer *    |                         |
 * World *  +-+-----------+           +-+-----------+
 *********  |             |    eth0   |             |
     |      |             +-----------+             |
     | eth2 |  Reference  |    eth1   |   System    |
     +------+  server     +-----------+   Under     |
            |             |    ib0    |   Tests     |
            |             +-----------+             |
            |             |    ...    |             |
            +-------------+           +-------------+


With virtual machines
=====================

If you choose to use virtual machines, we recommend you use
two KVM virtual machines:
o system under test
o reference server
It is recommended to use QCow2 hard disk images, because
they have a smaller size.

Create the virtual networks and the virtual machines:
o Create a bridge br0 containing your real networking card
  by configuring those interfaces in
    /etc/sysconfig/network/ifcfg-br0
    /etc/sysconfig/network/ifcfg-eth0
o Create two private networks, one will be used
  for eth0 and the other one for eth1
o Create the two virtual machines.

For the last two steps, you can use the templates
provided in jenkins-files/ directory.


Installing the machines
=======================

Install an operating system. You need at least a 3.7 kernel
on the reference machine (because of IPv6 NAT).

We suggest using:
o openSUSE 13.1 on the reference machine,
o SLES 12 on the system under tests.

There's no need for a separate home partition.
There's no need to install X-Window.

Create an ordinary user named "testuser" on the reference
machine and on the system under tests.

Make sure the networking cards are named correctly:
o reference: "eth0", "eth1" and "eth2"
o sut: "eth0" and "eth1"
otherwise fix them with yast2.

Also fix the hostname to something useful in yast2.

Only if communicating with "reference" and "sut"
through serial or virtio:
o Install twopence_test_server in /root directory on
  those machines, as described in Twopence's README
  (install it for example with scp).

On the reference server only:
o Install radvd, dhcp-server, tcpdump, and openvpn

On the system under tests only:
o Install gdb, openvpn, and ndisc6

Do the basic network and files configuration:
o Run the scripts basic-config/setup-sut.sh
  and basic-config/setup-ref.sh
  (you might need to change $ref and $sut variables
   in those scripts to accomodate your setup)


Running the tests
=================

You must first install the version of wicked
you want to test on sut.

You must then define four variables:

   TARGET_SUT
     Describes the way to communicate with sut,
     for example "virtio:/var/run/twopence/sut.sock"
     or "serial:/dev/ttyS0".

   TARGET_REFERENCE
     Describes the way to communicate with reference.
     For more information on twopence targets, please
     refer to twopence documentation.

   CONFIGURE_LOWERDEVS
     If "false", do not provide configuration files for lower devices
     used for example in a bond.

   CONFIGURE_PRECISE
     If "false", use for example "wicked ifup all" instead of
     "wicked ifup" for every device name.

If you are using virtio or serial, start twopence-test-server
on both virtual machines.

Then you simply type:

   cucumber

to start the tests.


Using jenkins
=============

If you use Jenkins, the script

   build-and-run-wicked.sh

will take care of building a new version of
wicked and of running the tests.

Building requires to install:
o git, osc, make, gcc
o libgcrypt-devel, libnl3-devel, dbus-1-devel,
  and libiw-devel
on the machine where Jenkins run.

The script above assumes that every virtual machine uses
a disk in qcow2 format with a sane situation.
In this sane situation, there is no core dump,
twopence-test-server is running, etc.

You have templates for Jenkins jobs. To generate the jobs,
use script config-job.sh.
